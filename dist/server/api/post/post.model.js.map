{"version":3,"sources":["../../../../server/api/post/post.model.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;;AAErE,IAAI,UAAU,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;AACnC,OAAK,EAAE,MAAM;AACb,aAAW,EAAE,MAAM;AACnB,OAAK,EAAE,MAAM;AACb,UAAQ,EAAE,MAAM;AAChB,aAAW,EAAE,IAAI;AACjB,UAAQ,EAAE;AACR,QAAI,EAAE,MAAM;AACZ,eAAS,MAAM;GAChB;;AAED,UAAQ,EAAE,CAAC;AACT,WAAO,EAAE,MAAM;AACf,QAAI,EAAE;AACJ,UAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ;AAC9B,SAAG,EAAE,MAAM;KACZ;AACD,aAAS,EAAE;AACT,UAAI,EAAE,IAAI;AACV,iBAAS,IAAI,CAAC,GAAG;KAClB;AACD,SAAK,EAAE,CAAC;AACN,UAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ;AAC9B,SAAG,EAAE,MAAM;KACZ,CAAC;AACF,WAAO,EAAE,CAAC;AACJ,UAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ;AAC9B,SAAG,EAAE,MAAM;KACd,CAAC;GACL,CAAC;AACF,MAAI,EAAE,CAAC;AACL,QAAI,EAAC,MAAM;GACZ,CAAC;AACF,MAAI,EAAE;AACJ,QAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ;AAC9B,OAAG,EAAE,MAAM;GACZ;AACD,WAAS,EAAE;AACT,QAAI,EAAE,IAAI;AACV,eAAS,IAAI,CAAC,GAAG;GAClB;AACD,OAAK,EAAE,CAAC;AACJ,QAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ;AAC9B,OAAG,EAAE,MAAM;GACZ,CAAC;AACJ,SAAO,EAAE,CAAC;AACJ,QAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ;AAC9B,OAAG,EAAE,MAAM;GACd,CAAC;CACL,CAAC,CAAC;;AAEH,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,UAAS,IAAI,EAAC;AACnC,MAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC9B,MAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;AACvC,MAAI,EAAE,CAAC;CACR,CAAC,CAAC;AACH,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,UAAS,IAAI,EAAC;AACtC,MAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACtB,MAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;AAC/B,MAAI,EAAE,CAAC;CACR,CAAC,CAAC;;AAEH,UAAU,CAAC,KAAK,CAAC;AACf,SAAO,EAAE,MAAM;AACf,eAAa,EAAE,MAAM;AACrB,aAAW,EAAE,MAAM;AACnB,oBAAkB,EAAE,MAAM;CAC3B,EAAE,EAAC,IAAI,EAAE,mBAAmB,EAAC,CAAC,CAAC;;qBAEjB,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC","file":"post.model.js","sourcesContent":["'use strict';\r\n\r\nvar mongoose = require('bluebird').promisifyAll(require('mongoose'));\r\n\r\nvar PostSchema = new mongoose.Schema({\r\n  title: String,\r\n  description: String,\r\n  price: Number,\r\n  location: String,\r\n  serviceDate: Date,\r\n  progress: {\r\n    type: String,\r\n    default: \"Open\"\r\n  },\r\n  //active: Boolean,\r\n  comments: [{\r\n    content: String,\r\n    user: {\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: 'User'\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now,\r\n    },\r\n    likes: [{\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: 'User'\r\n    }],\r\n    reports: [{\r\n          type: mongoose.Schema.ObjectId,\r\n          ref: 'User'\r\n      }],\r\n  }],\r\n  tags: [{\r\n    text:String,\r\n  }],\r\n  user: {\r\n    type: mongoose.Schema.ObjectId,\r\n    ref: 'User'\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now\r\n  },\r\n  likes: [{\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: 'User'\r\n    }],\r\n  reports: [{\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: 'User'\r\n    }],\r\n});\r\n\r\nPostSchema.pre('find', function(next){\r\n  this.populate('user', 'name');\r\n  this.populate('comments.user', 'name');\r\n  next();\r\n});\r\nPostSchema.pre('findOne', function(next){\r\n  this.populate('user');\r\n  this.populate('comments.user');\r\n  next();\r\n});\r\n\r\nPostSchema.index({\r\n  'title': 'text',\r\n  'description': 'text',\r\n  'tags.text': 'text',\r\n  'comments.content': 'text',\r\n}, {name: 'post_schema_index'});\r\n\r\nexport default mongoose.model('Post', PostSchema);\r\n"]}